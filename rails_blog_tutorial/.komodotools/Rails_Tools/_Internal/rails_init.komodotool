{
  "keyboard_shortcut": "", 
  "name": "rails_init", 
  "language": "JavaScript", 
  "trigger_enabled": "1", 
  "rank": "100", 
  "trigger": "trigger_observer", 
  "value": [
    "var project = (Components.classes[\"@activestate.com/koToolbox2Service;1\"].getService().", 
    "                       runningMacro.project);", 
    "if (typeof(subject) == \"undefined\") subject = null;", 
    "else {", 
    "    if (subject != project) {", 
    "        //dump(\"This macro's project is \"", 
    "        //     + project.name", 
    "        //     + \" but we were triggered by \"", 
    "        //     + ('name' in subject ? subject.name : (\"subject: name unknown\"))", 
    "        //     + \"\\n\");", 
    "        return;", 
    "    }", 
    "    var suffix = \"src/templates/raw/rails/Ruby on Rails.kpf\";", 
    "    if (project.url.lastIndexOf(suffix) + suffix.length", 
    "        == project.url.length) {", 
    "        //dump(\"Loaded the template; leave\\n\");", 
    "        return;", 
    "    }", 
    "}", 
    "if (!('as_rails_macros' in ko)", 
    "    || typeof(ko.as_rails_macros.version) != \"number\"", 
    "    || ko.as_rails_macros.version < 0.71) { // update version # manually", 
    "    ko.as_rails_macros = {  // make it global", 
    "        version : 0.71,", 
    "        ", 
    "        CmdSequenceRunner : function(editor, cmds, end_note) {", 
    "            this.editor = editor;", 
    "            this.cmds = cmds;", 
    "            this.end_note = end_note;", 
    "            this.options = {};", 
    "        },", 
    "        ", 
    "        validateVersion : function(appPath, appName) {", 
    "            // do a sanity check:", 
    "            var runSvc = Components.classes[\"@activestate.com/koRunService;1\"].getService();", 
    "            var output = {};", 
    "            var error = {};                ", 
    "            runSvc.RunAndCaptureOutput('\"' + appPath + '\" --version',", 
    "                                       '', '', '',", 
    "                                       output, error);", 
    "            var re = new RegExp(appName + '(?:\\\\.exe)?\\\\s+Ver[\\\\s\\\\d\\.]+Distrib[\\\\s\\\\d\\\\.]+',", 
    "                                'i');", 
    "            var res = re.test(output.value);", 
    "            if (!res) {", 
    "                dump(\"Expecting \" + appName", 
    "                     + \" from \" + appPath", 
    "                     + \", got \" + output.value + \"\\n\");", 
    "            }", 
    "            return res;", 
    "        },", 
    "        ", 
    "        mysql_bindir : null,", 
    "        mysql_bindir_prefname : \"mysql.bin.dir\",        ", 
    "        getMysql_bindir : function() {", 
    "            if (!this.mysql_bindir) {", 
    "                var global_prefset = Components.classes[\"@activestate.com/koPrefService;1\"].getService().prefs;", 
    "                if (!global_prefset.hasStringPref(this.mysql_bindir_prefname)) {", 
    "                    global_prefset.setStringPref(this.mysql_bindir_prefname, '');", 
    "                } else {", 
    "                    this.mysql_bindir = global_prefset.getStringPref(this.mysql_bindir_prefname);", 
    "                }", 
    "            }", 
    "            return this.mysql_bindir;", 
    "        },", 
    "        setMysql_bindir : function(dirname) {", 
    "            if (this.mysql_bindir != dirname) {", 
    "                var global_prefset = Components.classes[\"@activestate.com/koPrefService;1\"].getService().prefs;", 
    "                global_prefset.setStringPref(this.mysql_bindir_prefname, this.mysql_bindir = dirname);", 
    "            }", 
    "        }, ", 
    "        ", 
    "        getExecutablePath : function(appName) {", 
    "            var appPath = Components.classes[\"@activestate.com/koSysUtils;1\"].", 
    "                getService(Components.interfaces.koISysUtils).Which(appName);", 
    "            if (!appPath) {", 
    "                var mysql_bindir = this.getMysql_bindir();", 
    "                var appNameExe = appName;", 
    "                if (Components.classes['@activestate.com/koInfoService;1'].", 
    "                        getService(Components.interfaces.koIInfoService).platform.substring(0, 3) == \"win\") {", 
    "                    appNameExe += \".exe\";", 
    "                }", 
    "                var defaultFilename;", 
    "                var os = Components.classes[\"@activestate.com/koOs;1\"].getService();", 
    "                var ospath = os.path;", 
    "                if (mysql_bindir) {", 
    "                    defaultFilename = ospath.join(mysql_bindir, appNameExe);", 
    "                    if (ospath.exists(defaultFilename)) {", 
    "                        return defaultFilename;", 
    "                    }", 
    "                } else {", 
    "                    defaultFilename = appNameExe;", 
    "                }", 
    "                appPath = ko.filepicker.browseForExeFile(null, defaultFilename,", 
    "                                                       \"Location of \" + appName);", 
    "                if (!appPath) {", 
    "                    throw new Error(\"You cancelled.\");", 
    "                }", 
    "                var newMysqlDir;", 
    "                if ((newMysqlDir = ospath.dirname(appPath)) != mysql_bindir) {", 
    "                    dump(\"Updating mysql bindir to \" + newMysqlDir + \"\\n\");", 
    "                    this.setMysql_bindir(newMysqlDir);", 
    "                }", 
    "            }", 
    "            return appPath;", 
    "        },", 
    "        ", 
    "        mysqlAdminFinder : function() {", 
    "            if (this.mysqladminPath) {", 
    "                if (this.validateVersion(this.mysqladminPath, 'mysqladmin')) {", 
    "                    return this.mysqladminPath;", 
    "                } else {", 
    "                    dump(\"bad mysqladmin of [\" + this.mysqladminPath + \"]: <\" + output.value + \">\\n\");", 
    "                    this.mysqladminPath = null;", 
    "                }", 
    "            }", 
    "            return this.mysqladminPath = this.getExecutablePath(\"mysqladmin\");", 
    "        },", 
    "        ", 
    "        mysqlDumpFinder : function() {", 
    "            var mysqldump = null;", 
    "            if (this.mysqldumpPath) {", 
    "                mysqldump = this.mysqldumpPath;", 
    "                dump(\"this.mysqldumpPath is set\\n\");", 
    "            } else if (this.mysqladminPath &&", 
    "                       /^(.*)[\\/\\\\]mysqladmin/.test(this.mysqladminPath)) {", 
    "                    mysqldump = RegExp.$1;", 
    "                    dump(\"this.mysqldumpPath passes\\n\");", 
    "            }", 
    "            if (mysqldump && this.validateVersion(mysqldump, 'mysqldump')) {", 
    "                return this.mysqldumpPath = mysqldump;", 
    "            } else {", 
    "                return this.mysqldumpPath = this.getExecutablePath(\"mysqldump\");", 
    "            }", 
    "        },", 
    "        ", 
    "        db_adapters : {},", 
    "        db_adapter_handlers : null,", 
    "        db_adapter_commands : {", 
    "            mysql : {", 
    "                'create' : \"-u %(username) --password=%(password) %?(socket)  create %(database)\",", 
    "                'delete' : \"-u %(username) --password=%(password) %?(socket) --force drop %(database)\"", 
    "            },", 
    "            __END__ : null", 
    "        },", 
    "        // This function does the following:", 
    "        // 1. Get the root name of the database from the yaml file", 
    "        // 2. Get the username and password from the yaml file", 
    "        // 3. Verify we know how to handle the specified adapter        ", 
    "        // 4. Build or delete the databases", 
    "        ", 
    "        // @param {Object} \"editor\"-- the top-level object macros execute in", 
    "        // @param {String} \"displayOperation\"-- one of 'create' or 'delete'", 
    "        // @param {String} \"displayOperationGerund\"-- one of 'creation' or 'deletion'", 
    "        manageDatabases : function(editor, displayOperation, displayOperationGerund) {", 
    "            try {", 
    "                var config = this.parseConfig();", 
    "            } catch(ex) {", 
    "                alert(ex + \"\\n\");", 
    "                return;", 
    "            }", 
    "            var self = this;", 
    "            if (!this.db_adapter_handlers) {", 
    "                this.db_adapter_handlers = {};", 
    "                this.db_adapter_handlers.mysql = this.mysqlAdminFinder;", 
    "                // put other handlers here.", 
    "            }", 
    "            var cmds = [];", 
    "            for (var type in {'development':null, 'test':null, 'production':null}) {", 
    "                var thisConfig = config[type];", 
    "                var dbname = thisConfig.database;", 
    "                if (!dbname) {", 
    "                    ko.as_rails_macros.append_terminal_output(\"No database specified for type \" + type);", 
    "                    continue;", 
    "                }", 
    "                var host = thisConfig['host'];", 
    "                if (host && host != 'localhost') {", 
    "                    ko.as_rails_macros.append_terminal_output(\"Sorry, you'll have to manually \"", 
    "                          + displayOperation", 
    "                          + \" database \" + dbname + \".  \"", 
    "                          + \"Only local databases are supported in automatic database manipulation\");", 
    "                    continue;", 
    "                }\t\t", 
    "                var adapter = thisConfig['adapter'];", 
    "                if (!(adapter in this.db_adapters)) {", 
    "                    if (adapter.toLowerCase() in this.db_adapter_handlers) {", 
    "                        this.db_adapters[adapter] = this.db_adapter_handlers[adapter.toLowerCase()].apply(this);", 
    "                    } else {", 
    "                        this.db_adapters[adapter] = null;", 
    "                    }", 
    "                }", 
    "                if (!this.db_adapters[adapter]) {", 
    "                    ko.as_rails_macros.append_terminal_output(\"Sorry, you'll have to manually \" + displayOperation", 
    "                          + \" database \" + dbname + \".  \" +", 
    "                          \"Komodo Rails projects do not yet support automatic database manipulation for \" +", 
    "                          adapter + \" databases.\");", 
    "                    continue;", 
    "                }", 
    "                var rawCommand = this.db_adapter_commands[adapter][displayOperation];", 
    "                var finishedCommand = this.quote_if_needed(this.db_adapters[adapter]) + \" \";", 
    "                while (rawCommand.length > 0) {", 
    "                    if (/^%\\((.*?)\\)(.*)/.test(rawCommand)) {", 
    "                        var arg = thisConfig[RegExp.$1];", 
    "                        finishedCommand += this.quote_if_needed(arg);", 
    "                        rawCommand = RegExp.$2;", 
    "                    } else if (/^%\\?\\((.*?)\\)(.*)/.test(rawCommand)) {", 
    "                        // like expand %(socket) to either --socket=arg[socket], or ignore", 
    "                        var arg = RegExp.$1;", 
    "                        if (thisConfig[arg]) {", 
    "                            finishedCommand += (\"--\" + arg + \"=\" +", 
    "                                                this.quote_if_needed(thisConfig[arg]));", 
    "                        }", 
    "                        rawCommand = RegExp.$2;", 
    "                    } else {", 
    "                        var x = rawCommand.indexOf('%');", 
    "                        if (x > -1) {", 
    "                            finishedCommand += rawCommand.substr(0, x);", 
    "                            rawCommand = rawCommand.substr(x);", 
    "                        } else {", 
    "                            finishedCommand += rawCommand.substr(0, 1);", 
    "                            rawCommand = rawCommand.substr(1);", 
    "                        }", 
    "                    }", 
    "                }", 
    "                cmds.push(finishedCommand);", 
    "            }", 
    "            if (cmds.length > 0) {", 
    "                (new this.CmdSequenceRunner(editor, cmds,", 
    "                    \"Database \" + displayOperationGerund + \" done\")).runner();", 
    "            }", 
    "        },", 
    "        ", 
    "        _check_opt : function(options, arg, default_val) {", 
    "            return typeof(options[arg]) == \"undefined\" ? default_val : options[arg];", 
    "        },", 
    "        ", 
    "        runCommand : function(editor, cmd, options, terminationCallback) {", 
    "            // Check for undefined commands", 
    "            ko.run.runCommand(editor, cmd,", 
    "                              this._check_opt(options, 'dir', null),", 
    "                              this._check_opt(options, 'env', ''),", 
    "                              this._check_opt(options, 'insertOutput', false),", 
    "                              this._check_opt(options, 'operateOnSelection', false),", 
    "                              this._check_opt(options, 'doNotOpenOutputWindow', false),", 
    "                              this._check_opt(options, 'runIn', \"command-output-window\"),", 
    "                              this._check_opt(options, 'parseOutput', false),", 
    "                              this._check_opt(options, 'parseRegex', ''),", 
    "                              this._check_opt(options, 'showParsedOutputList', false),", 
    "                              this._check_opt(options, 'name', null),", 
    "                              this._check_opt(options, 'clearOutputWindow', true),", 
    "                              terminationCallback);", 
    "        },", 
    "", 
    "        // return an array of environment strings", 
    "        fixUserEnvPath : function fixUserEnvPath(targetPath) {", 
    "            var userEnvSvc = Components.classes[\"@activestate.com/koUserEnviron;1\"].getService(Components.interfaces.koIUserEnviron);", 
    "            var countHolder = {};", 
    "            var envStrings = userEnvSvc.GetEnvironmentStrings(countHolder);", 
    "            var osSvc = Components.classes[\"@activestate.com/koOs;1\"].getService(Components.interfaces.koIOs);", 
    "            var pathsep = osSvc.pathsep;", 
    "            for (var i = 0; i < envStrings.length; i++) {", 
    "                var env = envStrings[i];", 
    "                var parts = env.split('=', 2);", 
    "                if (parts[0].toLowerCase() == \"path\") {", 
    "                    var pathdirs = parts[1].split(pathsep);", 
    "                    if (pathdirs[0] != targetPath) {", 
    "                        pathdirs.unshift(targetPath);", 
    "                        return (parts[0] + '=' + pathdirs.join(pathsep));", 
    "                    }", 
    "                    break;", 
    "                }", 
    "            }", 
    "            return null;", 
    "        },", 
    "        ", 
    "        get_path_by_ko_pref : function get_path_by_ko_pref(appName) {", 
    "            var path = null;", 
    "            try {", 
    "                path = komodo.interpolate(\"%(\" + appName + \")\");", 
    "            } catch(ex) {", 
    "                dump(\"get_path_possibly_quoted: \" + ex + \"\\n\");", 
    "            }", 
    "            return path;", 
    "        },", 
    "        ", 
    "        quote_if_needed : function quote_if_needed(s) {", 
    "            var s1;", 
    "            if (/[^\\w.:\\-\\\"\\'\\\\\\/]/.test(s)) {", 
    "                s1 = '\"' + s + '\"';", 
    "            } else {", 
    "                s1 = s;", 
    "            }", 
    "            return s1;", 
    "        },", 
    "        ", 
    "        get_path_possibly_quoted : function get_path_possibly_quoted(appName) {", 
    "            var path = this.get_path_by_ko_pref(appName);", 
    "            if (path) {", 
    "                path = this.quote_if_needed(path);", 
    "            }", 
    "            return path;", 
    "        },", 
    "        ", 
    "        generateRailsObject : function generateRailsObject(editor,", 
    "                                                           extensions,", 
    "                                                           railsTypeName,", 
    "                                                           part_names) {", 
    "            var name;", 
    "            var project = (Components.classes[\"@activestate.com/koToolbox2Service;1\"].getService().", 
    "                           runningMacro.project);", 
    "            if (part_names) {", 
    "                var name_list;", 
    "                if (part_names.length == 2) {", 
    "                    name_list = dialog_prompt2(ko.as_rails_macros.capitalize(railsTypeName) + \" values\",", 
    "                                               part_names[0] + \":\", \"\", part_names[1] + \":\", \"\",", 
    "                                               \"Please enter values for the \" + railsTypeName,", 
    "                                               \"rails:\" + part_names[0], \"rails:\" + part_names[1]);", 
    "                    if (!name_list) return;", 
    "                } else {", 
    "                    name_list = [];", 
    "                    for (var i = 0; i < part_names.length; i++) {", 
    "                        var part_name = part_names[i];", 
    "                        var n = dialog_prompt(ko.as_rails_macros.capitalize(railsTypeName) + \" \" + part_name + \" name\",", 
    "                                         railsTypeName + \"/\" + part_name, \"\",", 
    "                                         \"Please enter a name for the \" + part_name,", 
    "                                          \"rails:\" + part_name);", 
    "                        if (!n) return;", 
    "                        name_list.push(n);", 
    "                    }", 
    "                }", 
    "                name = name_list.join(\" \");", 
    "            } else {", 
    "                name = dialog_prompt(ko.as_rails_macros.capitalize(railsTypeName) + \" name\",", 
    "                                     railsTypeName, \"\",", 
    "                                     \"Please enter a name for a \" + railsTypeName);", 
    "            }", 
    "            if (!name) {", 
    "                return;", 
    "            }", 
    "            var projectDirURL = project.url.substring(0, project.url.lastIndexOf(\"/\"));", 
    "            var terminationCallback = function(retval) {", 
    "                try {", 
    "                    var termscin = document.getElementById(\"runoutput-scintilla\").scimoz;", 
    "                    var text = termscin.text;", 
    "                    var textLines = text.split(/\\r?\\n/);", 
    "                    for (var i = 0; i < textLines.length; i++) {", 
    "                        try {", 
    "                            var a = textLines[i].split(/\\s+/);", 
    "                            if (a[0].length == 0) a.shift();", 
    "                            if (a[1] && a[1].indexOf(\".\") != -1) {", 
    "                                var doit = (!extensions);", 
    "                                if (!doit) {", 
    "                                    for (var ext in extensions) {", 
    "                                        if (a[1].lastIndexOf(ext) == a[1].length - ext.length) {", 
    "                                            doit = true;", 
    "                                            break;", 
    "                                        }", 
    "                                    }", 
    "                                }", 
    "                                if (doit) {", 
    "                                    var fname = project.getFile().dirName + \"/\" + a[1];", 
    "                                    fname = projectDirURL + \"/\" + a[1];", 
    "                                    ko.open.URI(fname);", 
    "                                }", 
    "                            }", 
    "                        } catch(ex) { dump(textLines[i] + \": \" + ex + \"\\n\"); }", 
    "                    }", 
    "                } catch(ex) { dump(ex + \"\\n\"); }", 
    "            };", 
    "            var rawRubyPath = this.get_path_by_ko_pref('ruby');", 
    "            if (!rawRubyPath) {", 
    "                throw new Error(\"No Komodo pref for Ruby was found\");", 
    "            }", 
    "            var rubyPath = this.quote_if_needed(rawRubyPath);", 
    "            var cmd = (rubyPath + ' script/generate ' + railsTypeName + ' ' + name + ' --skip');", 
    "            var options = {", 
    "                dir: project.getFile().dirName,", 
    "                env: this.fixUserEnvPath(rawRubyPath),", 
    "                __END__ : null", 
    "            };", 
    "            ko.as_rails_macros.runCommand(editor, cmd, options, terminationCallback);", 
    "        },", 
    "", 
    "        installPlugin : function installPlugin(editor, project,", 
    "                                               plugin, terminationCallback) {", 
    "            if (typeof(terminationCallback) == \"undefined\") terminationCallback = null;", 
    "            var rawRubyPath = this.get_path_by_ko_pref('ruby');", 
    "            if (!rawRubyPath) {", 
    "                throw new Error(\"No Komodo pref for Ruby was found\");", 
    "            }", 
    "            var rubyPath = this.quote_if_needed(rawRubyPath);", 
    "            var cmd = (rubyPath + ' script/plugin install ' + plugin);", 
    "            var options = {", 
    "                dir: project.getFile().dirName,", 
    "                env: this.fixUserEnvPath(rawRubyPath),", 
    "                __END__ : null", 
    "            };", 
    "            ko.as_rails_macros.runCommand(editor, cmd, options, terminationCallback);", 
    "        },", 
    "", 
    "        setup_associated_paths_env : function setup_associated_paths_env(obj) {", 
    "            var rawRubyPath = this.get_path_by_ko_pref('ruby');", 
    "            if (!rawRubyPath) {", 
    "                throw new Error(\"No Komodo pref for Ruby was found\");", 
    "            }", 
    "            var osPathSvc = Components.classes[\"@activestate.com/koOsPath;1\"].getService(Components.interfaces.koIOsPath);", 
    "            var rootDir = osPathSvc.dirname(rawRubyPath);", 
    "            if ('base' in obj) {", 
    "                obj[obj.base] = this.quote_if_needed(osPathSvc.join(rootDir, obj.base));", 
    "            }", 
    "            obj.ruby = this.quote_if_needed(rawRubyPath);", 
    "            obj.env = this.fixUserEnvPath(rawRubyPath);", 
    "        },", 
    "        ", 
    "        launchRubyAppInConsole : function launchRubyAppInConsole(editor, project, cmd_args_str) {", 
    "            var rawRubyPath = this.get_path_by_ko_pref('ruby');", 
    "            if (!rawRubyPath) {", 
    "                throw new Error(\"No Komodo pref for Ruby was found\");", 
    "            }", 
    "            var options = { runIn: \"new-console\",", 
    "                            dir: project.getFile().dirName,", 
    "                            env: this.fixUserEnvPath(rawRubyPath),", 
    "                            __END__ : null", 
    "            };", 
    "            var rubyPath = this.quote_if_needed(rawRubyPath);", 
    "            var cmd = rubyPath + '  ' + cmd_args_str;", 
    "            ko.as_rails_macros.runCommand(editor, cmd, options);", 
    "        },", 
    "        ", 
    "        mysqladminPath : null,", 
    "        ", 
    "        getConfig : function() {", 
    "            var project = (Components.classes[\"@activestate.com/koToolbox2Service;1\"].getService().", 
    "                           runningMacro.project);", 
    "            var os = Components.classes[\"@activestate.com/koOs;1\"].getService();", 
    "            var ospath = os.path;", 
    "            var parts = [project.getFile().dirName, 'config', 'database.yml'];", 
    "            var configPath = ospath.joinlist(parts.length, parts);", 
    "            if (!ospath.exists(configPath)) {", 
    "                throw new Error(\"Can't find file \" + configPath);", 
    "            }", 
    "            var contents = os.readfile(configPath);", 
    "            return contents;", 
    "        },", 
    "        ", 
    "        parseConfig : function(configText) {", 
    "            function mergeConfigs(curr_hash, template_hash) {", 
    "                for (var p in template_hash) {", 
    "                    curr_hash[p] = template_hash[p];", 
    "                }", 
    "            }", 
    "            if (!configText) {", 
    "                configText = this.getConfig();", 
    "            }", 
    "            var lines = configText.split(/\\r?\\n/);", 
    "            var hash = {development:{}, test:{}, production:{}};", 
    "            var curr_hash = null;", 
    "            var aliases = {};", 
    "            for (var i = 0; i < lines.length; i++) {", 
    "                var line = lines[i];", 
    "                if (/^(\\w+)s*:\\s+\\&(\\w+)/.test(line)) {", 
    "                    var anchor_name = RegExp.$2;", 
    "                    if (!aliases[anchor_name]) {", 
    "                        aliases[anchor_name] = {}", 
    "                    }", 
    "                    curr_hash = aliases[anchor_name];", 
    "                } else if (/<<\\s*:\\s*\\*(\\w+)/.test(line)) {", 
    "                    var anchor = RegExp.$1;", 
    "                    if (!aliases[anchor]) {", 
    "                        dump(\"rails_init: parseConfig: Anchor \" + anchor + \" not recognized\\n\");", 
    "                    } else {", 
    "                        mergeConfigs(curr_hash, aliases[anchor]);", 
    "                    }", 
    "                } else if (/^(development|test|production):/.test(line)) {", 
    "                    curr_hash = hash[RegExp.$1];", 
    "                } else if (/^\\s+(\\w+)s*:\\s*(.*?)\\s*$/.test(line)) {", 
    "                    curr_hash[RegExp.$1] = RegExp.$2;", 
    "                }", 
    "            }", 
    "            return hash;", 
    "        },", 
    "        ", 
    "        configSupported : function configSupported(config, requirements) {", 
    "            for (var i in requirements) {", 
    "                var opt = requirements[i];", 
    "                var field = opt[0];", 
    "                if (config[field] && config[field] != opt[1]) {", 
    "                    return opt[2];", 
    "                }", 
    "            }", 
    "            return null;", 
    "        },", 
    "        ", 
    "        // put helper functions here", 
    "        ", 
    "        capitalize : function capitalize(s) {", 
    "            if (s.length == 0) return s;", 
    "            else if (s.length == 1) return s.toUpperCase()", 
    "            else return s[0].toUpperCase() + s.substr(1);", 
    "        },    ", 
    "        _eol_strs : [\"\\r\\n\", \"\\n\", \"\\r\"],", 
    "    ", 
    "        append_terminal_output : function(str) {", 
    "            try {", 
    "                var scimoz = document.getElementById(\"runoutput-scintilla\").scimoz;", 
    "                var currNL = this._eol_strs[scimoz.eOLMode];", 
    "                var full_str = (scimoz.getColumn(scimoz.length) == 0) ? \"\" : currNL;", 
    "                full_str += \"*************************************\" + currNL + str + currNL;", 
    "                var full_str_byte_length = ko.stringutils.bytelength(full_str);", 
    "                var ro = scimoz.readOnly;", 
    "                try {", 
    "                    scimoz.readOnly = false;", 
    "                    scimoz.appendText(full_str_byte_length, full_str);", 
    "                } finally {", 
    "                    scimoz.readOnly = ro;", 
    "                }", 
    "            } catch(ex) {", 
    "                // dump(ex + \"\\n\");", 
    "                // We failed to write str to the output-window, so alert it.", 
    "                alert(str);", 
    "            }", 
    "        },", 
    "        ", 
    "        __end__ : null", 
    "    };", 
    "            ", 
    "    // other items are constants in effect", 
    "    ko.as_rails_macros.CmdSequenceRunner.prototype.terminationCallback = function() {", 
    "        try {", 
    "        this.clearOutputWindow = false;", 
    "        this.cmds.shift();", 
    "        if (this.cmds.length > 0) {", 
    "            this.options.clearOutputWindow = false;", 
    "            this.runner();", 
    "        } else if (this.end_note) {", 
    "            ko.as_rails_macros.append_terminal_output(this.end_note);", 
    "        }", 
    "        }catch(ex)  { alert(ex + \"\\n\"); }", 
    "    };", 
    "    ko.as_rails_macros.CmdSequenceRunner.prototype.runner = function() {", 
    "        var self = this;", 
    "        var tcb = function() {", 
    "            self.terminationCallback();", 
    "        }", 
    "        ko.as_rails_macros.runCommand(this.editor, this.cmds[0], this.options, tcb);", 
    "    }", 
    "    ", 
    "} else {", 
    "    // dump(\"ko.as_rails_macros already exists, type = \" + typeof(ko.as_rails_macros) + \"\\n\");", 
    "}"
  ], 
  "version": "1.0.7", 
  "trigger_observer_topic": "project_added", 
  "async": "1", 
  "type": "macro"
}